---
import AvatarComponent from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { formatDate, readingTime } from '@/lib/utils';
import { Image } from 'astro:assets';
import { type CollectionEntry } from 'astro:content';
import Link from './Link.astro';
import { Icon } from 'astro-icon/components'

type Props = {
  entry: CollectionEntry<'posts'>;
  authors: {
    slug: string;
    name: string;
    full_name: string;
    avatar: string;
    isRegistered: boolean;
  }[];
};

const { entry, authors } = Astro.props as Props;

const formattedDate = formatDate(entry.data.date);
const readTime = readingTime(entry.body);
---

<style>
  .placeholder {
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 1;
    transition: opacity 0.5s ease-in-out;
    position: relative;
    z-index: 1;
  }
  .zoomable-image {
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 2;
  }
  .zoomable-image.loaded {
    opacity: 1;
  }
</style>

<div
  class="hover-card not-prose rounded-xl border p-3"
>
  <Link
    href={`/${entry.collection}/${entry.slug}`}
    class="flex flex-col gap-4 sm:flex-row"
  >
  {entry.data.image && (
    <div class="relative max-w-[200px] sm:flex-shrink-0 relative">
      <div
        class="placeholder rounded-xl bg-gray-200 dark:bg-gray-900"
        id={`placeholder-${entry.slug}`}
      >
          {entry.data.thumbnail_icon ? (
            <div class="h-[105px] w-[200px] rounded-xl bg-blue-600 dark:bg-blue-300 flex items-center justify-center ">
              <Icon name={`${entry.data.thumbnail_icon}`} class="h-16 w-16 text-gray-900 dark:text-gray-100" />
            </div>
          ) : (
            <div class="h-[105px] w-[200px] rounded-xl bg-gray-200 dark:bg-gray-900 flex items-center justify-center ">
              <Icon name="lucide:image" class="h-10 w-10 text-gray-400 dark:text-gray-700" />
            </div>
          )}
      </div>
      <Image 
        src={entry.data.image}
        alt=""
        width={1200}
        height={630}
        class="zoomable-image object-cover rounded-xl absolute top-0 left-0"
        loading="lazy"
        onload={`this.classList.add('loaded');`}
      />
    </div>
  )}
  {!entry.data.image && entry.data.thumbnail_icon && (
    <div class="relative max-w-[200px] sm:flex-shrink-0 relative">
      <div
        class="rounded-xl bg-gray-200 dark:bg-gray-900"
      >
        {entry.data.thumbnail_icon ? (
          <div class={`h-[105px] w-[200px] rounded-xl ${entry.data.thumbnail_bg} flex items-center justify-center`}>
            <Icon name={`${entry.data.thumbnail_icon}`} class={`h-20 w-20 ${entry.data.thumbnail_color}`} />
          </div>
        ) : (
          <div class="h-[105px] w-[200px] rounded-xl bg-gray-200 dark:bg-gray-900 flex items-center justify-center ">
            <Icon name="lucide:image" class="h-10 w-10 text-gray-400 dark:text-gray-700" />
          </div>
        )}
      </div>
    </div>
  )}  
    <div class="flex-grow">
      <h3 class="mb-1 text-xl font-extrabold leading-extra-tight">
        {entry.data.title}
      </h3>
      <p class="mb-2 text-sm font-medium text-muted-foreground">
        {entry.data.description}
      </p>
      <div
        class="mb-2 flex flex-wrap items-center gap-x-2 text-xs text-muted-foreground"
      >
        {authors.length > 0 && (
          <>
            {authors.map((author) => (
              <div class="flex items-center gap-x-1.5">
                <AvatarComponent
                  client:load
                  src={author.avatar}
                  alt={author.full_name}
                  fallback={author.name[0]}
                  className="size-5 rounded-full"
                />
                <span>{author.full_name}</span>
              </div>
            ))}
            <Separator orientation="vertical" className="h-4" />
          </>
        )}
        <span>{formattedDate}</span>
        <Separator orientation="vertical" className="h-4" />
        <span>{readTime}</span>
      </div>
      {entry.data.tags && (
        <div class="flex flex-wrap gap-2">
          {entry.data.tags.map((tag) => (
            <Badge variant="secondary">{tag}</Badge>
          ))}
        </div>
      )}
    </div>
  </Link>
</div>