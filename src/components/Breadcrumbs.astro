---
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from '@/components/ui/breadcrumb'
import { Icon } from 'astro-icon/components'

export interface BreadcrumbItem {
  href?: string
  label: string
  icon?: string
}

interface Props {
  items: BreadcrumbItem[]
  class?: string
  truncationLength?: number
}

const { items, class: className, truncationLength = 35 } = Astro.props

function truncateLabel(label?: string, length?: number) {
  if (!label) return ''
  if (!length) length = 35
  return label.length > length ? `${label.slice(0, length)}...` : label
}
---

<style>
  .truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
</style>

<Breadcrumb className={className}>
  <BreadcrumbList>
    <BreadcrumbItem>
      <BreadcrumbLink href="/">
        <Icon name="lucide:home" class="size-4" />
      </BreadcrumbLink>
    </BreadcrumbItem>
    {
      items.map((item, index) => (
        <>
          <BreadcrumbSeparator />
          <BreadcrumbItem>
            {index === items.length - 1 ? (
              <BreadcrumbPage>
                <span class="flex items-center gap-x-2 truncate">
                  {item.icon && <Icon name={item.icon} class="size-4" />}
                  {truncateLabel(item.label, truncationLength)}
                </span>
              </BreadcrumbPage>
            ) : (
              <BreadcrumbLink href={item.href}>
                <span class="flex items-center gap-x-2 truncate">
                  {item.icon && <Icon name={item.icon} class="size-4" />}
                  {truncateLabel(item.label, truncationLength)}
                </span>
              </BreadcrumbLink>
            )}
          </BreadcrumbItem>
        </>
      ))
    }
  </BreadcrumbList>
</Breadcrumb>