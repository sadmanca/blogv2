---
import type { ImageMetadata } from "astro";
import { Image, getImage } from "astro:assets";
import { marked } from "marked";

interface ImageInfo {
  src: ImageMetadata;
  caption: string;
  width?: number;
  height?: number;
}

interface Props {
  imagePaths: ImageInfo[];
}

const { imagePaths } = Astro.props;
---

<div
  id="gallery"
  class="w-full grid gap-2"
  style="
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    grid-auto-flow: dense;
    margin-top: 0rem !important;
    margin-bottom: 0rem !important;
  "
>
  {
    imagePaths.map(async (item) => {
      let optimizedImage;
      if (item.src.src.endsWith('.gif')) {
        optimizedImage = { src: item.src.src, attributes: { width: item.width, height: item.height } };
      } else {
        optimizedImage = await getImage({
          src: item.src,
        });
      }

      return (
      <figure 
        class="overflow-hidden relative"
        style="
          margin-top: 0rem !important;
          margin-bottom: -0.25rem !important;
        "
      >
          <a
            href={optimizedImage.src}
            data-pswp-width={optimizedImage.attributes.width}
            data-pswp-height={optimizedImage.attributes.height}
            target="_blank"
            class="pswp-img-link block"
            onclick="event.preventDefault();"
          >
            <div class="absolute inset-0 bg-gray-100 dark:bg-gray-900 animate-pulse" id="skeleton"></div>
            <Image
              src={item.src}
              alt={item.caption.replace(/<\/?[^>]+(>|$)/g, "")} 
              class="pswp-img rounded-lg w-full h-full object-cover hover:cursor-zoom-in"
              onload="this.previousElementSibling.style.display='none';"
            />
          </a>
          <figcaption class="text-center mt-0 -translate-y-2 text-xs text-gray-400 dark:text-gray-400"
            set:html={marked(item.caption)}>
          </figcaption>
        </figure>
      );
    })
  }
</div>