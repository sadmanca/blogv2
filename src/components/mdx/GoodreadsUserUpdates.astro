---
import { getCollection } from 'astro:content';
import { Icon } from 'astro-icon/components';
import { Image } from 'astro:assets';

interface Props {
  collection?: string;
  limit?: number;
  showTypes?: Array<string>;
  className?: string;
}

const { 
  collection = "goodreads_user_updates", 
  limit = 10,
  showTypes,
  className = ""
} = Astro.props;

// Get the updates from the content collection
const allUpdates = await getCollection("goodreads_user_updates");

// Sort updates by publication date (newest first)
const sortedUpdates = allUpdates.sort((a, b) => 
  new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
);

// Filter by type if showTypes is provided
const filteredUpdates = showTypes 
  ? sortedUpdates.filter(update => update.data.itemData && 
      showTypes.includes(update.data.itemData.type))
  : sortedUpdates;

// Limit the number of updates to display
const updates = filteredUpdates.slice(0, limit);

// Format date to a more readable format
const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  const day = date.getDate();
  const month = date.toLocaleString('default', { month: 'long' });
  const year = date.getFullYear();
  const time = date.toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });
  return `${day} ${month}, ${year} at ${time}`;
};
---

<div class={`goodreads-updates ${className}`}>
  <div class="updates-container space-y-4">
    {updates.length === 0 ? (
      <div class="text-center text-gray-500 dark:text-gray-400 my-8">
        <p>No recent updates found.</p>
      </div>
    ) : (
      updates.map((update) => {
        const itemData = update.data.itemData;
        const date = formatDate(update.data.pubDate);
        const goodreadsLink = update.data.link || "#";
        
        return (
          <div class="update-item border border-[#723c0c]/25 dark:border-[#5a2d09]/50 rounded-lg p-4 bg-[#fcf9e6]/15 dark:bg-[#723c0c]/15" data-pub-date={update.data.pubDate}>
            <div class="flex justify-between items-start mb-1">
              <a href={goodreadsLink} class="text-sm text-gray-500 dark:text-gray-400 relative group cursor-hover hover:text-[#723c0c] dark:hover:text-[#e39a59]/80">
                <span class="flex items-center justify-center">
                  <span id={`time-ago-${update.id}`}>... days ago</span>
                </span>
                <span class="hidden group-hover:block absolute z-10 w-max bg-gray-100 dark:bg-gray-900 border border-gray-500 text-gray-700 dark:text-gray-200 py-1 px-2 rounded shadow-md text-xs whitespace-nowrap left-1/2 -translate-x-1/2 bottom-full">
                  {date}
                </span>
              </a>
              {itemData?.type && (
                <span class="text-xs px-2 py-0.5 rounded-full border border-[#723c0c]/25 bg-[#fcf9e6] dark:bg-[#723c0c]/60 text-[#723c0c] dark:text-[#fcf9e6]">  
                  {(() => {
                    let typeAbbreviation = '';
                    let icon = '';

                    switch (itemData.type) {
                      case 'ReadStatus':
                        typeAbbreviation = 'Updates';
                        icon = 'book-copy';
                        break;
                      case 'Review':
                        typeAbbreviation = 'Review';
                        icon = 'star';
                        break;
                      case 'UserStatus':
                        typeAbbreviation = 'Reading';
                        icon = 'book-open-text';
                        break;
                      case 'CommentReview':
                      case 'CommentStatus':
                        typeAbbreviation = 'Comment';
                        icon = 'message-square';
                        break;
                      case 'LikeReview':
                      case 'LikeReadStatus':
                        typeAbbreviation = 'Like';
                        icon = 'heart';
                        break;
                      case 'AuthorFollowing':
                        typeAbbreviation = 'Follow';
                        icon = 'user-plus';
                        break;
                      default:
                        typeAbbreviation = "...";
                        icon = 'info';
                    }

                    return (
                      <>
                        <Icon name={`lucide:${icon}`} class="w-4 h-4 inline-block align-middle relative" /> {typeAbbreviation}
                      </>
                    );
                  })()}
                </span>
              )}
            </div>

            {/* ReadStatus: started reading, wants to read, finished reading */}
            {itemData?.type === "ReadStatus" && (
              <div class="flex gap-4 items-center mt-2">
                <a href={itemData.bookUrl}>
                  <div class="w-[78px] h-[117px] bg-gray-100 dark:bg-gray-800 rounded flex items-center justify-center relative">
                    {!itemData.bookImgUrl ? (
                      <Icon name="lucide:book" class="w-8 h-8 text-gray-500 dark:text-gray-400 absolute" />
                    ) : (
                      <Image 
                        src={itemData.bookImgUrl.replace("_SY75_", "_SY175_")} 
                        alt={`Cover of ${itemData.bookTitle}`} 
                        width={78}
                        height={117}
                        format="webp"
                        class="rounded"
                      />
                    )}
                  </div>
                </a>
                <div class="leading-5">
                  <p class="text-gray-900 dark:text-gray-200">
                    <a href={itemData.userUrl} class="font-bold text-[#723c0c] dark:text-[#e39a59] hover:underline">{update.data.title.split(" ")[0]}</a> 
                    <span class="">{itemData.readingStatus}</span>
                    {' '}
                    <a href={itemData.bookUrl} class="text-[#723c0c] dark:text-[#e39a59] hover:underline">
                      {itemData.bookTitle}
                    </a>
                    {' '}by {itemData.bookAuthor}.
                  </p>
                </div>
              </div>
            )}

            {/* Review: rated a book */}
            {itemData?.type === "Review" && (
              <div class="flex gap-4 items-start">
                <a href={itemData.bookUrl}>
                  <div class="w-[78px] h-[117px] bg-gray-100 dark:bg-gray-800 rounded flex items-center justify-center relative">
                    {!itemData.bookImgUrl ? (
                      <Icon name="lucide:book" class="w-8 h-8 text-gray-500 dark:text-gray-400 absolute" />
                    ) : (
                      <Image 
                        src={itemData.bookImgUrl.replace("_SY75_", "_SY175_")} 
                        alt={`Cover of ${itemData.bookTitle}`} 
                        width={78}
                        height={117}
                        format="webp"
                        class="rounded"
                      />
                    )}
                  </div>
                </a>
                <div>
                  <p class="text-gray-900 dark:text-gray-200">
                    <a href={itemData.userUrl} class="font-bold text-[#723c0c] dark:text-[#e39a59] hover:underline">{update.data.title.split(" ")[0]}</a> Rated <span class="font-bold">{itemData.rating} stars</span>
                    {' '}for{' '}
                    <a href={itemData.bookUrl} class="text-[#723c0c] dark:text-[#e39a59] hover:underline">
                      {itemData.bookTitle}
                    </a>
                    {' '}by {itemData.bookAuthor}
                  </p>
                  <div class="flex mt-1">
                    {Array.from({ length: 5 }, (_, i) => (
                      <span class={`text-lg ${i < itemData.rating ? 'text-yellow-400' : 'text-gray-300 dark:text-gray-600'}`}>
                        â˜…
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {/* UserStatus: reading progress */}
            {itemData?.type === "UserStatus" && (
              <div class="flex gap-4 items-center mt-3">
                <a href={itemData.bookUrl}>
                  <div class="w-[78px] h-[117px] bg-gray-100 dark:bg-gray-800 rounded flex items-center justify-center relative">
                    {!itemData.bookImgUrl ? (
                      <Icon name="lucide:book" class="w-8 h-8 text-gray-500 dark:text-gray-400 absolute" />
                    ) : (
                      <Image 
                        src={itemData.bookImgUrl.replace("_SY75_", "_SY175_")} 
                        alt={`Cover of ${itemData.bookTitle}`} 
                        width={78}
                        height={117}
                        format="webp"
                        class="rounded"
                      />
                    )}
                  </div>
                </a>
                <div class="leading-5">
                  <p class="text-gray-900 dark:text-gray-200">
                    <a href={itemData.userUrl} class="font-bold text-[#723c0c] dark:text-[#e39a59] hover:underline">Sadman</a>
                    is
                    <span class="font-bold">
                      {itemData.percentRead ? `${itemData.percentRead}%` : "reading"}
                    </span>
                    through
                    {' '}
                    <a href={itemData.bookUrl} class="text-[#723c0c] dark:text-[#e39a59] hover:underline">
                      {itemData.bookTitle}
                    </a>
                    {' '}by {itemData.bookAuthor}.
                  </p>
                  {itemData.percentRead && (
                    <div class="w-full bg-gray-200 dark:bg-gray-800 rounded-full h-2.5 mt-2">
                      <div 
                        class="bg-[#6854ff] h-2.5 rounded-full" 
                        style={`width: ${itemData.percentRead}%`}>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* CommentReview: commented on a review */}
            {itemData?.type === "CommentReview" && (
              <div>
                <p class="text-gray-900 dark:text-gray-200">
                  <a href={itemData.userUrl} class="font-bold text-[#723c0c] dark:text-[#e39a59] hover:underline">{update.data.title.split(" ")[0]}</a> commented on <a href={itemData.reviewUrl} class="text-[#723c0c] dark:text-[#e39a59] hover:underline">{itemData.reviewUser}'s review</a> of{' '}
                  <a href={itemData.bookUrl} class="text-[#723c0c] dark:text-[#e39a59] hover:underline">{itemData.bookTitle}</a>
                </p>
                <div class="flex items-start gap-2 mt-2">
                  {itemData.userUrl && (
                    <img 
                      src="/static/profile.jpg"
                      alt={`${itemData.userUrl}'s profile`} 
                      class="w-8 h-8 rounded-full"
                    />
                  )}
                  <div class="mt-7 relative bg-[#6854ff] text-gray-100 rounded-r-lg rounded-bl-lg p-3">
                    {itemData.comment}
                  </div>
                </div>
              </div>
            )}

            {/* LikeReview: liked someone's review */}
            {itemData?.type === "LikeReview" && (
              <div class="flex gap-4 items-start">
                <a href={itemData.bookUrl}>
                  <div class="w-[78px] h-[117px] bg-gray-100 dark:bg-gray-800 rounded flex items-center justify-center relative">
                    {!itemData.bookImgUrl ? (
                      <Icon name="lucide:book" class="w-8 h-8 text-gray-500 dark:text-gray-400 absolute" />
                    ) : (
                      <Image 
                        src={itemData.bookImgUrl.replace("_SY75_", "_SY175_")} 
                        alt={`Cover of ${itemData.bookTitle}`} 
                        width={78}
                        height={117}
                        format="webp"
                        class="rounded"
                      />
                    )}
                  </div>
                </a>
                <div>
                  <p class="text-gray-900 dark:text-gray-200">
                    <a href={itemData.userUrl} class="font-bold text-[#723c0c] dark:text-[#e39a59] hover:underline">{update.data.title.split(" ")[0]}</a> liked <a href={itemData.reviewUrl} class="text-[#723c0c] dark:text-[#e39a59] hover:underline">{itemData.reviewUser}'s review</a> of{' '}
                    <a href={itemData.bookUrl} class="text-[#723c0c] dark:text-[#e39a59] hover:underline">{itemData.bookTitle}</a>
                  </p>
                </div>
              </div>
            )}

            {/* AuthorFollowing: followed an author */}
            {itemData?.type === "AuthorFollowing" && (
              <div>
                <p class="text-gray-900 dark:text-gray-200">
                  <a href={itemData.userUrl} class="font-bold text-[#723c0c] dark:text-[#e39a59] hover:underline">{update.data.title.split(" ")[0]}</a> started following author <a href={`https://www.goodreads.com/author/show/${itemData.authorId}`} class="text-[#723c0c] dark:text-[#e39a59] hover:underline">
                    {update.data.title.replace("is now following", "").trim()}
                  </a>
                </p>
              </div>
            )}

            {/* CommentStatus: commented on a status */}
            {itemData?.type === "CommentStatus" && (
              <div>
                <p class="text-gray-900 dark:text-gray-200">
                  <a href={itemData.userUrl} class="font-bold text-[#723c0c] dark:text-[#e39a59] hover:underline">{update.data.title.split(" ")[0]}</a> commented on <a href={itemData.statusUrl} class="text-[#723c0c] dark:text-[#e39a59] hover:underline">{itemData.statusUser}'s status</a>:
                </p>
                <div class="flex items-start gap-2 mt-2">
                  {itemData.userUrl && (
                    <img 
                      src="/static/profile.jpg"
                      alt={`${itemData.userUrl}'s profile`} 
                      class="w-8 h-8 rounded-full"
                    />
                  )}
                  <div class="mt-7 relative bg-[#6854ff] text-gray-100 rounded-r-lg rounded-bl-lg p-3">
                    {itemData.comment}
                  </div>
                </div>
              </div>
            )}

            {/* LikeReadStatus: liked someone's read status */}
            {itemData?.type === "LikeReadStatus" && (
            <div>
              <p class="text-gray-900 dark:text-gray-200">
                <a href={itemData.userUrl} class="font-bold text-[#723c0c] dark:text-[#e39a59] hover:underline">{update.data.title.split(" ")[0]}</a> liked {itemData.readStatusUser}'s status update:
              </p>
              <div class="flex items-start gap-2 mt-2">
                {itemData.readStatusUserImgUrl && (
                  <img 
                    src={itemData.readStatusUserImgUrl}
                    alt={`${itemData.readStatusUser}'s profile`} 
                    class="w-8 h-8 rounded-full object-cover aspect-square"
                  />
                )}
                <div class="mt-7 relative bg-gray-300/50 dark:bg-gray-700/50 text-gray-700 dark:text-gray-300 rounded-r-lg rounded-bl-lg p-3 italic">
                  {itemData.readStatusUser} {itemData.readStatus} 
                  <a href={itemData.bookUrl} class="text-[#723c0c] dark:text-[#e39a59] hover:underline">{itemData.bookTitle}</a>
                </div>
              </div>
            </div>
          )}

            {/* Fallback for any other types or missing itemData */}
            {(!itemData || !["ReadStatus", "Review", "UserStatus", "CommentReview", "LikeReview", "AuthorFollowing", "CommentStatus", "LikeReadStatus"].includes(itemData.type)) && (
              <p class="text-gray-900 dark:text-gray-200">
                {update.data.title}
                {update.data.description && (
                  <span class="block text-sm text-gray-500 dark:text-gray-400 mt-1">
                    {update.data.description.replace(/<[^>]*>/g, '')}
                  </span>
                )}
              </p>
            )}
            
            <div class="mt-3">
              <a 
                href={goodreadsLink} 
                target="_blank" 
                rel="noopener noreferrer"
                class="text-xs text-gray-500 hover:text-[#723c0c] dark:text-gray-400 dark:hover:text-[#e39a59]/80"
              >
                View on Goodreads â†’
              </a>
            </div>
          </div>
        );
      })
    )}
  </div>
</div>

<script is:inline>
  function updateTimeAgo() {
    const timeAgo = (dateString) => {
      const date = new Date(dateString);
      const now = new Date();
      const diff = now.getTime() - date.getTime();
      const seconds = Math.floor(diff / 1000);
      const minutes = Math.floor(seconds / 60);
      const hours = Math.floor(minutes / 60);
      const days = Math.floor(hours / 24);
      const weeks = Math.floor(days / 7);
      const months = Math.floor(days / 30);
      const years = Math.floor(days / 365);

      if (years > 0) {
        return `${years} year${years > 1 ? 's' : ''} ago`;
      } else if (months > 0) {
        return `${months} month${months > 1 ? 's' : ''} ago`;
      } else if (weeks > 0) {
        return `${weeks} week${weeks > 1 ? 's' : ''} ago`;
      } else if (days > 0) {
        return `${days} day${days > 1 ? 's' : ''} ago`;
      } else if (hours > 0) {
        return `${hours} hour${hours > 1 ? 's' : ''} ago`;
      } else if (minutes > 0) {
        return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
      } else {
        return 'Just now';
      }
    };

    const updates = document.querySelectorAll('.update-item');

    updates.forEach(update => {
      const timeAgoElement = update.querySelector('[id^="time-ago-"]');
      const pubDateString = update.dataset.pubDate;

      if (timeAgoElement && pubDateString) {
        timeAgoElement.textContent = timeAgo(pubDateString);
      }
    });
  }

  // Run on initial page load
  updateTimeAgo();

  // Run after navigation with Astro's view transitions or Swup
  document.addEventListener('astro:page-load', updateTimeAgo);
  document.addEventListener('astro:after-swap', updateTimeAgo);
  document.addEventListener('swup:contentReplaced', updateTimeAgo);
</script>