---
import { Image } from 'astro:assets';

const { gridMarginTop = 5, titleMarginTop = 1, ratingMarginBottom = 1, filterYear, filterTitles = [], type = 'movies' } = Astro.props;

const TRAKT_WATCHED_URL = `https://api.trakt.tv/users/sadmanca/watched/${type}`;
const TRAKT_RATINGS_URL = `https://api.trakt.tv/users/sadmanca/ratings/${type}`;
const TRAKT_CLIENT_ID = import.meta.env.TRAKT_CLIENT_ID;
const TMDB_API_KEY = import.meta.env.TMDB_API_KEY;
const LIMIT = 999999999999999999999;
const TIMEOUT = 200000; // Set timeout to 200 seconds
const REQUEST_DELAY = 200;

let watchedItems = [];
let ratings: never[] = [];

const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

const fetchWithTimeout = async (url: string, options = {}, timeout = TIMEOUT) => {
  await delay(REQUEST_DELAY);
  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), timeout);
  const response = await fetch(url, { ...options, signal: controller.signal });
  clearTimeout(id);
  return response;
};

try {
  const watchedResponse = await fetchWithTimeout(TRAKT_WATCHED_URL, {
    headers: {
      'Content-Type': 'application/json',
      'trakt-api-version': '2',
      'trakt-api-key': TRAKT_CLIENT_ID,
    },
  });

  if (!watchedResponse.ok) {
    throw new Error(`HTTP error! status: ${watchedResponse.status}`);
  }

  const watchedData = await watchedResponse.json();

  const ratingsResponse = await fetchWithTimeout(TRAKT_RATINGS_URL, {
    headers: {
      'Content-Type': 'application/json',
      'trakt-api-version': '2',
      'trakt-api-key': TRAKT_CLIENT_ID,
    },
  });

  if (!ratingsResponse.ok) {
    throw new Error(`HTTP error! status: ${ratingsResponse.status}`);
  }

  const ratingsData = await ratingsResponse.json();

  ratings = ratingsData.reduce((acc: { [x: string]: any; }, item: { [x: string]: { ids: { tmdb: string | number; }; }; rating: any; }) => {
    acc[item[type.slice(0, -1)].ids.tmdb] = item.rating;
    return acc;
  }, {});

  watchedItems = await Promise.all(watchedData.slice(0, LIMIT).map(async (item: any, index: any) => {
    await delay(index * REQUEST_DELAY); // Throttle requests
    const tmdbId = item[type.slice(0, -1)].ids.tmdb;
    let image_api_request;
    if (type == 'movies') {
      image_api_request = `https://api.themoviedb.org/3/movie/${tmdbId}?api_key=${TMDB_API_KEY}&language=en-US`;
    } else {
      image_api_request = `https://api.themoviedb.org/3/tv/${tmdbId}?api_key=${TMDB_API_KEY}&language=en-US`;
    }
    const tmdbResponse = await fetchWithTimeout(image_api_request);
    const tmdbData = await tmdbResponse.json();

    return {
      title: item[type.slice(0, -1)].title,
      year: item[type.slice(0, -1)].year,
      last_watched_at: item.last_watched_at,
      poster: `https://image.tmdb.org/t/p/w200${tmdbData.poster_path}`,
      imdb: item[type.slice(0, -1)].ids.imdb,
      rating: ratings[tmdbId] || 'N/A',
    };
  }));

  if (filterYear) {
    watchedItems = watchedItems.filter(item => new Date(item.last_watched_at).getFullYear() === filterYear);
  }

  if (filterTitles.length > 0) {
    watchedItems = watchedItems.filter(item => filterTitles.includes(item.title));
  }

  watchedItems.sort((a, b) => new Date(b.last_watched_at).getTime() - new Date(a.last_watched_at).getTime());

} catch (error) {
  console.error('Error fetching or parsing data from Trakt API:', error);
}

function formatDate(dateString: any) {
  const monthNames = [
    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',
  ];

  const date = new Date(dateString);
  const day = date.getUTCDate();
  const month = monthNames[date.getUTCMonth()];
  const year = date.getUTCFullYear();

  return `${day} ${month} ${year}`;
}
---

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .placeholder {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #c3c3c3;
    width: 100%;
    height: 100%;
    opacity: 1;
    transition: opacity 0.5s ease-in-out;
    position: relative;
    z-index: 1;
  }
  .zoomable-image {
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
  }
  .zoomable-image.loaded {
    opacity: 1;
  }
  .trakt-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 16px;
  }
  .trakt-item {
    border: 1px solid #ccc;
    padding: 8px;
    text-align: center;
  }
</style>

<div class={`mt-${gridMarginTop} trakt`}>
  <div class="grid grid-cols-3 gap-2 sm:grid-cols-6 md:grid-cols-7 lg:grid-cols-7 xl:grid-cols-7">
    {watchedItems.map((item: {
      [x: string]: any; title: string; year: number; last_watched_at: string; poster: string; rating: number 
    }) => (
    <div class="flex flex-col items-center">
      <a
        href={`https://www.imdb.com/title/${item.imdb}`}
        class="h-36 w-24"
        target="_blank"
      >
        <div class="relative h-full w-full">
          <div class="placeholder rounded-md" id={`placeholder-${item.imdb}`}>
            <div class="h-12 w-12 bg-gray-300 rounded-md"></div>
          </div>
          <Image
            src={item.poster}
            alt={item.title}
            class="h-full w-full rounded-md object-cover zoomable-image"
            title={`${item.title}`}
            width={101}
            height={150}
            onload={`document.getElementById('placeholder-${item.imdb}').classList.add('hidden'); this.classList.add('loaded');`}
          />
        </div>
      </a>
        <div class={`mt-${titleMarginTop} text-center`}>
          <a 
            href={`https://www.imdb.com/title/${item.imdb}`} 
            class="line-clamp-3 block w-31 text-xs underline"
            style="text-underline-offset: 2px;"
            target="_blank" 
            rel="noopener noreferrer"
            title={`${item.title}`}
          >
            {item.title} ({item.year})
          </a>
          <span 
            class="mt-1 block text-xs text-muted-foreground" 
            title="Last Watched">
              Last Watched:<br/>{formatDate(item.last_watched_at)}
          </span>
          <div class={`mb-${ratingMarginBottom} flex items-center justify-center`} title={`Rating given: ${item.rating}/10`}>
            {Array.from({ length: 5 }, (_, i) => {
              const fullStars = Math.floor(item.rating / 2);
              const hasHalfStar = item.rating % 2 >= 1;
              const isFullStar = i < fullStars;
              const isHalfStar = i === fullStars && hasHalfStar;

              return (
                <div class="relative h-4 w-4">
                  {/* Full star */}
                  {isFullStar && (
                    <svg
                      class="absolute h-full w-full text-black-500 dark:text-white"
                      fill="currentColor"
                      viewBox="0 0 20 20"
                    >
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.957a1 1 0 00.95.69h4.163c.969 0 1.371 1.24.588 1.81l-3.37 2.448a1 1 0 00-.364 1.118l1.286 3.957c.3.921-.755 1.688-1.54 1.118l-3.37-2.448a1 1 0 00-1.175 0l-3.37 2.448c-.784.57-1.84-.197-1.54-1.118l1.286-3.957a1 1 0 00-.364-1.118L2.174 9.384c-.783-.57-.38-1.81.588-1.81h4.163a1 1 0 00.95-.69l1.286-3.957z" />
                    </svg>
                  )}

                  {/* Half star */}
                  {isHalfStar && (
                    <>
                      {/* Left half */}
                      <svg
                        class="absolute h-full w-full text-black-500 dark:text-white"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                        style="clip-path: inset(0 50% 0 0);"
                      >
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.957a1 1 0 00.95.69h4.163c.969 0 1.371 1.24.588 1.81l-3.37 2.448a1 1 0 00-.364 1.118l1.286 3.957c.3.921-.755 1.688-1.54 1.118l-3.37-2.448a1 1 0 00-1.175 0l-3.37 2.448c-.784.57-1.84-.197-1.54-1.118l1.286-3.957a1 1 0 00-.364-1.118L2.174 9.384c-.783-.57-.38-1.81.588-1.81h4.163a1 1 0 00.95-.69l1.286-3.957z" />
                      </svg>
                      {/* Right half */}
                      <svg
                        class="absolute h-full w-full text-gray-300 dark:text-gray-600"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                        style="clip-path: inset(0 0 0 50%);"
                      >
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.957a1 1 0 00.95.69h4.163c.969 0 1.371 1.24.588 1.81l-3.37 2.448a1 1 0 00-.364 1.118l1.286 3.957c.3.921-.755 1.688-1.54 1.118l-3.37-2.448a1 1 0 00-1.175 0l-3.37 2.448c-.784.57-1.84-.197-1.54-1.118l1.286-3.957a1 1 0 00-.364-1.118L2.174 9.384c-.783-.57-.38-1.81.588-1.81h4.163a1 1 0 00.95-.69l1.286-3.957z" />
                      </svg>
                    </>
                  )}

                  {/* Empty star */}
                  {!isFullStar && !isHalfStar && (
                    <svg
                      class="absolute h-full w-full text-gray-300 dark:text-gray-600"
                      fill="currentColor"
                      viewBox="0 0 20 20"
                    >
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.957a1 1 0 00.95.69h4.163c.969 0 1.371 1.24.588 1.81l-3.37 2.448a1 1 0 00-.364 1.118l1.286 3.957c.3.921-.755 1.688-1.54 1.118l-3.37-2.448a1 1 0 00-1.175 0l-3.37 2.448c-.784.57-1.84-.197-1.54-1.118l1.286-3.957a1 1 0 00-.364-1.118L2.174 9.384c-.783-.57-.38-1.81.588-1.81h4.163a1 1 0 00.95-.69l1.286-3.957z" />
                    </svg>
                  )}
                </div>
              );
            })}
          </div>
        </div>
    </div>
    ))}
  </div>
</div>