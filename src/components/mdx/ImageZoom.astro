---
import { Image } from 'astro:assets';

export interface Props {
  src: string | ImageMetadata; // Allow both string and ImageMetadata
  alt: string;
  class?: string;
  isAstroImage?: boolean;
}

let { src, alt, class: className, isAstroImage } = Astro.props;

// Ensure `isAstroImage` only applies to valid Astro Image metadata
const isValidAstroImage = typeof src === 'object' && src.src;
---

<div class="image-zoom-container">
  {isValidAstroImage ? (
    <Image {...src} alt={alt} class={`zoomable-image ${className}`} />
  ) : (
    <img src={typeof src === 'string' ? src : ''} alt={alt} class={`zoomable-image ${className}`} />
  )}
</div>

<style>
  .image-zoom-container {
    position: relative;
    display: inline-block;
    cursor: zoom-in;
    margin: 0;
    padding: 0;
  }

  .zoomable-image {
    width: 100%;
    transition: transform 0.25s ease;
  }

  /* Add hover scaling behavior, only when not zoomed */
  .image-zoom-container:hover .zoomable-image:not([data-zoomed="true"]) {
    transform: scale(1.05);
  }

  .zoomable-image[data-zoomed="true"] {
    transform: scale(1.5) !important;
    cursor: zoom-out;
  }

  .zoomed {
    z-index: 1000; /* Ensure it is on top of other elements */
    position: relative; /* Ensure z-index works */
  }
</style><script>
  function initializeImageZoom() {
    const containers = document.querySelectorAll('.image-zoom-container');

    containers.forEach((container) => {
      if (container.dataset.zoomInitialized) return;

      container.dataset.zoomInitialized = true;
      let isZoomed = false;

      const img = container.querySelector('.zoomable-image');
      if (!img) return;

      const toggleZoom = () => {
        isZoomed = !isZoomed;

        if (isZoomed) {
          img.setAttribute('data-zoomed', 'true');
          img.classList.add('zoomed');
          container.style.cursor = 'zoom-out';
        } else {
          img.removeAttribute('data-zoomed');
          img.classList.remove('zoomed');
          container.style.cursor = 'zoom-in';
        }
      };

      const unzoom = () => {
        if (isZoomed) {
          isZoomed = false;
          img.removeAttribute('data-zoomed');
          img.classList.remove('zoomed');
          container.style.cursor = 'zoom-in';
        }
      };

      container.addEventListener('click', toggleZoom);
      container.addEventListener('mouseleave', unzoom);
      window.addEventListener('resize', unzoom);
      document.addEventListener('click', (event) => {
        if (!container.contains(event.target) && isZoomed) {
          unzoom();
        }
      });
    });
  }

  // Re-initialize on page navigation
  document.addEventListener('astro:page-load', initializeImageZoom);

  // Initialize on first load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeImageZoom);
  } else {
    initializeImageZoom();
  }
</script>
