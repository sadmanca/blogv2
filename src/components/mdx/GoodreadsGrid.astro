---
import xml2js from 'xml2js'
import { Image } from 'astro:assets';

const { titleMarginTop = 1 } = Astro.props;
const { ratingMarginBottom = 4 } = Astro.props;

const GOODREADS_URL =
  'https://www.goodreads.com/review/list_rss/152185079?key=_0elm4i3w7r24rhlGCl4tPmj0V9u5Jla71mdKQ_MBPUwhSys&shelf=read'

const response = await fetch(GOODREADS_URL)
const data = await response.text()
const result = await xml2js.parseStringPromise(data)
const books = result.rss.channel[0].item.map((item: any) => {
  const highResImageUrl = item.book_image_url[0]
    .replace(/(\._SX\d+_|\._SY\d+_)+/g, '._SX150_SY150_')
    .replace(/(\._SY\d+_)+/g, '._SY150_')

  return {
    title: item.title[0],
    shelves: item.user_shelves,
    date_read: item.user_read_at,
    rating: item.user_rating[0],
    author_name: item.author_name,
    book_image_url: highResImageUrl,
    book_id: item.book_id[0],
  }
})

// Sort books by date_read (latest first)
books.sort((a: any, b: any) => {
  if (!a.date_read || a.date_read[0] === '') return -1; // Place a at the top if date_read is missing
  if (!b.date_read || b.date_read[0] === '') return 1; // Place b at the top if date_read is missing
  const dateA = new Date(a.date_read);
  const dateB = new Date(b.date_read);
  return dateB.getTime() - dateA.getTime();
});

function formatDate(dateString: any) {
  const monthNames = [
    'Jan',
    'Feb',
    'Mar',
    'Apr',
    'May',
    'Jun',
    'Jul',
    'Aug',
    'Sep',
    'Oct',
    'Nov',
    'Dec',
  ]

  const date = new Date(dateString)
  const day = date.getUTCDate()
  const month = monthNames[date.getUTCMonth()]
  const year = date.getUTCFullYear()

  return `${day} ${month} ${year}`
}
---

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .placeholder {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #c3c3c3;
    width: 100%;
    height: 100%;
    opacity: 1;
    transition: opacity 0.5s ease-in-out;
    position: relative;
    z-index: 1;
  }
  .zoomable-image {
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
  }
  .zoomable-image.loaded {
    opacity: 1;
  }
</style>

<div class="goodreads">
  <div
    class="grid grid-cols-3 gap-2 sm:grid-cols-6 md:grid-cols-7 lg:grid-cols-7 xl:grid-cols-7"
  >
    {
      books.map((book: any) => (
        <div class="flex flex-col items-center">
          <a
            href={`https://www.goodreads.com/book/show/${book.book_id}`}
            class="h-36 w-24"
            target="_blank"
          >
            <div class="relative h-full w-full">
              <div class="placeholder rounded-md" id={`placeholder-${book.book_id}`}>
                <div class="h-12 w-12 bg-gray-300 rounded-md"></div>
              </div>
              <Image
                src={book.book_image_url}
                alt={book.title}
                class="h-full w-full rounded-md object-cover zoomable-image"
                title={`${book.title}`}
                width={101}
                height={150}
                onload={`document.getElementById('placeholder-${book.book_id}').classList.add('hidden'); this.classList.add('loaded');`}
              />
            </div>
          </a>
          <div class={`mt-${titleMarginTop} text-center`}>
            <a
              href={`https://www.goodreads.com/book/show/${book.book_id}`}
              class="line-clamp-2 block w-20 text-xs font-semibold underline"
              style="text-underline-offset: 2px;"
              target="_blank"
              title={`${book.title}`}
            >
              {book.title}
            </a>
            <span
              class="mt-1 block w-20 truncate text-xs text-muted-foreground"
              title={`${book.author_name}`}
            >
              {book.author_name}
            </span>
            {book.date_read[0] !== '' && (
              <span class="block text-xs text-muted-foreground" title="Date read">
                {formatDate(book.date_read)}
              </span>
            )}
            <div class={`mb-${ratingMarginBottom} flex items-center justify-center`} title={`Rating given: ${book.rating}/5 stars`}>
              {Array.from({ length: 5 }, (_, i) => (
                <svg
                  class={`h-4 w-4 ${i < book.rating ? 'text-black-500 dark:text-white' : 'text-gray-300 dark:text-gray-600'}`}
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.957a1 1 0 00.95.69h4.163c.969 0 1.371 1.24.588 1.81l-3.37 2.448a1 1 0 00-.364 1.118l1.286 3.957c.3.921-.755 1.688-1.54 1.118l-3.37-2.448a1 1 0 00-1.175 0l-3.37 2.448c-.784.57-1.84-.197-1.54-1.118l1.286-3.957a1 1 0 00-.364-1.118L2.174 9.384c-.783-.57-.38-1.81.588-1.81h4.163a1 1 0 00.95-.69l1.286-3.957z" />
                </svg>
              ))}
            </div>
          </div>
        </div>
      ))
    }
  </div>
</div>