---
import AuthorCard from '@/components/AuthorCard.astro';
import BlogCard from '@/components/BlogCard.astro';
import Breadcrumbs from '@/components/Breadcrumbs.astro';
import Container from '@/components/Container.astro';
import Layout from '@/layouts/Layout.astro';
import { type CollectionEntry, getCollection } from 'astro:content';

export async function getStaticPaths() {
  const authors = await getCollection('authors');
  return authors.map((author) => ({
    params: { slug: author.slug },
  }));
}

const { slug } = Astro.params;

const author = await getCollection('authors').then((authors) =>
  authors.find((a) => a.slug === slug)
);

if (!author) {
  throw new Error(`Author not found for slug: ${slug}`);
}

const allPosts = await getCollection('posts');
const authorPosts = allPosts
  .filter((post) => post.data.authors?.includes(author.slug))
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

const authors = await getCollection('authors');
const authorsData = authors.map(author => ({
  slug: author.slug,
  name: author.data.name,
  full_name: author.data.full_name,
  avatar: author.data.avatar,
  isRegistered: true,
}));

const getAuthorsForPost = (post: CollectionEntry<'posts'>) => {
  return (post.data.authors || []).map((authorSlug) => {
    return authorsData.find((a) => a.slug === authorSlug) || {
      slug: authorSlug,
      name: authorSlug,
      full_name: authorSlug,
      avatar: '/static/profile.jpg',
      isRegistered: false,
    };
  });
};
---

<Layout
  title={`${author.data.name}`}
  description={author.data.bio || `Profile of ${author.data.name}.`}
>
  <Container class="flex flex-col gap-y-6">
    <Breadcrumbs
      items={[
        { href: '/about', label: 'Authors', icon: 'lucide:users' },
        { label: author.data.name, icon: 'lucide:user' },
      ]}
    />

    <section>
      <AuthorCard author={{ ...author.data, slug: author.slug, bio: author.data.bio || "" }} linkDisabled />
    </section>
    <section class="flex flex-col gap-y-4">
      <h2 class="text-2xl font-semibold">Posts by {author.data.full_name}</h2>
      {authorPosts.length > 0 ? (
        <ul class="not-prose flex flex-col gap-4">
          {authorPosts.map((post) => (
            <li class="translate-y-2/4 intersect:translate-y-0 transition ease-in-out duration-1000 opacity-0 intersect:opacity-100 intersect-once">
              <BlogCard entry={post} authors={getAuthorsForPost(post)} />
            </li>
          ))}
        </ul>
      ) : (
        <p class="text-muted-foreground">
          No posts available from this author.
        </p>
      )}
    </section>
  </Container>
</Layout>
