---
import Breadcrumbs from '@/components/Breadcrumbs.astro';
import Link from '@/components/Link.astro';
import PostNavigation from '@/components/PostNavigation.astro';
import TableOfContents from '@/components/TableOfContents.astro';
import { badgeVariants } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import Feelback from "@/components/ui/feelback";
import "@feelback/react/styles/feelback.css";
import Layout from '@/layouts/Layout.astro';
import { formatDate, readingTime } from '@/lib/utils';
import { Icon } from 'astro-icon/components';
import { Image } from 'astro:assets';
import { type CollectionEntry, getCollection } from 'astro:content';
import Comments from '@/components/Comments.astro';

export async function getStaticPaths() {
  const posts = (await getCollection('posts'))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: {
      post,
      authors: post.data.authors,
    },
  }));
}

type Props = {
  post: CollectionEntry<'posts'>;
  authors: string[];
};

const { post, authors } = Astro.props;

const { Content, headings } = await post.render();

const allAuthors = await getCollection('authors');

const authorData = authors.map((authorSlug) => {
  const author = allAuthors.find((a) => a.slug === authorSlug);
  return {
    slug: authorSlug,
    name: author ? author.data.name : authorSlug,
    full_name: author ? author.data.full_name : authorSlug,
    avatar: '/static/profile.jpg',
    isRegistered: !!author,
  };
});

const posts = (await getCollection('posts'))
  .filter((post) => !post.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

function getPostIndex(slug: string): number {
  return posts.findIndex((post) => post.slug === slug);
}

function getPrevPost(slug: string): CollectionEntry<'posts'> | null {
  const postIndex = getPostIndex(slug);
  return postIndex !== -1 && postIndex < posts.length - 1
    ? posts[postIndex + 1]
    : null;
}

function getNextPost(slug: string): CollectionEntry<'posts'> | null {
  const postIndex = getPostIndex(slug);
  return postIndex > 0 ? posts[postIndex - 1] : null;
}

const currentPostSlug = Astro.params.slug;
const nextPost = getNextPost(currentPostSlug);
const prevPost = getPrevPost(currentPostSlug);
---

<style>
  .placeholder {
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 1;
    transition: opacity 0.5s ease-in-out;
    position: relative;
    z-index: 1;
  }
  .zoomable-image {
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 2;
  }
  .zoomable-image.loaded {
    opacity: 1;
  }
</style>

<Layout
  title={post.data.title}
  description={post.data.description}
  image={post.data.image?.src ?? '/static/twitter-card.png'}
>
  <section
    class="grid grid-cols-[minmax(0px,1fr)_min(768px,100%)_minmax(0px,1fr)] gap-y-6 *:px-4"
  >
    <Breadcrumbs
      items={[
        { href: '/posts', label: 'Posts', icon: 'lucide:archive' },
        { label: post.data.title, icon: 'lucide:file-text' },
      ]}
      class="col-start-2"
    />
    {post.data.image && (
    <div class="relative col-span-full mx-auto w-full max-w-[300px]" style="padding-left: 0 !important; padding-right: 0!important;">
      <div
        class="aspect-[300/157.5] placeholder rounded-xl bg-gray-200 dark:bg-gray-900 absolute top-0 left-0 w-full h-full"
        id={`placeholder-${post.data.title}`}
      >
        <div class="w-full h-full rounded-xl bg-gray-200 dark:bg-gray-900 flex items-center justify-center">
          <Icon name="lucide:image" class="h-10 w-10 text-gray-400 dark:text-gray-700" />
        </div>
      </div>
      <Image 
        src={post.data.image}
        alt={post.data.title}
        width={300}
        height={157.5}
        class="zoomable-image w-full h-full object-cover rounded-xl absolute top-0 left-0"
        loading="lazy"
        style="border-radius: 0.75rem !important;"
        onload={`document.getElementById('placeholder-${post.data.title}').classList.add('hidden'); this.classList.add('loaded');`}
      />
    </div>
    )}
    <section class="col-start-2 flex flex-col gap-y-6 text-center">
      <div class="flex flex-col gap-y-4">
        <h1 class="text-5xl font-black leading-none sm:text-6xl sm:leading-[0.9] -mx-8">
          {post.data.title}
        </h1>
        <span class="text-primary bg-border-foreground rounded-full font-light leading-5 mx-14 px-8 py-2">
          {post.data.description}
        </span>

        <div
          class="flex flex-wrap items-center justify-center gap-2 text-sm text-muted-foreground"
        >
          {
            authorData.length > 0 && (
              <>
                <div class="flex items-center gap-x-2">
                  {authorData.map((author) => (
                    <div class="flex items-center gap-x-1.5">
                      <Image
                        src={author.avatar}
                        alt={author.name}
                        width={24}
                        height={24}
                        class="rounded-full"
                      />
                      <Link
                        href={`/about/${author.slug}`}
                        underline
                        class="text-foreground"
                      >
                        <span>{author.name}</span>
                      </Link>
                    </div>
                  ))}
                </div>
                <Separator orientation="vertical" className="h-4" />
              </>
            )
          }
          <div class="flex items-center gap-2">
            <span>{formatDate(post.data.date)}</span>
            <Separator orientation="vertical" className="h-4" />
            <span>{readingTime(post.body)}</span>
            <Separator orientation="vertical" className="h-4" />
            <span class="-ml-1">
              <Feelback client:load />
            </span>
          </div>
        </div>
        <div class="flex flex-wrap justify-center gap-2">
          {
            post.data.tags && post.data.tags.length > 0 ? (
              post.data.tags.map((tag) => (
                <a
                  href={`/tags/${tag}`}
                  class={`hover-card ${badgeVariants({ variant: 'secondary' })}`}
                >
                  <Icon name="lucide:hash" class="size-3 -translate-x-0.5" />
                  {tag}
                </a>
              ))
            ) : (
              <span class="text-sm text-muted-foreground">
                No tags available
              </span>
            )
          }
        </div>
      </div>

      <PostNavigation prevPost={prevPost} nextPost={nextPost} />
    </section>

    {headings.length > 0 && <TableOfContents headings={headings} />}

    <article
      class="prose prose-neutral col-start-2 max-w-none dark:prose-invert"
    >
      <Content />
    </article>

    <PostNavigation prevPost={prevPost} nextPost={nextPost} />
    <Comments/>
  </section>

  <Button
    variant="outline"
    size="icon"
    className="group fixed bottom-8 right-8 z-50 hidden"
    id="scroll-to-top"
    title="Scroll to top"
    aria-label="Scroll to top"
  >
    <Icon
      name="lucide:arrow-up"
      class="mx-auto size-4 transition-all group-hover:-translate-y-0.5"
    />
  </Button>

  <script>
    document.addEventListener('astro:page-load', () => {
      const scrollToTopButton = document.getElementById('scroll-to-top')
      const footer = document.querySelector('footer')

      if (scrollToTopButton && footer) {
        scrollToTopButton.addEventListener('click', () => {
          window.scrollTo({ top: 0, behavior: 'smooth' })
        })

        window.addEventListener('scroll', () => {
          const footerRect = footer.getBoundingClientRect()
          const isFooterVisible = footerRect.top <= window.innerHeight

          scrollToTopButton.classList.toggle(
            'hidden',
            window.scrollY <= 300 || isFooterVisible,
          )
        })
      }
    })
  </script>
</Layout>